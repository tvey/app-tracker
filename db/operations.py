from typing import Sequence

from sqlalchemy import select, delete

from .base import AsyncSessionLocal
from .models import AccessKey, Admin, Application, User


async def get_admin_ids():
    """"Return a list of Telegram IDs of admin users."""
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Admin.telegram_id))
        return result.scalars().all()


async def is_admin(telegram_id: int):
    async with AsyncSessionLocal() as session:
        stmt = select(Admin).where(Admin.telegram_id == telegram_id)
        result = await session.execute(stmt)
        admin = result.one_or_none()
        return bool(admin)


async def generate_key() -> str:
    """Return a key generated by an admin for future use in /start by a user."""
    async with AsyncSessionLocal() as session:
        new_key = AccessKey()
        session.add(new_key)
        await session.commit()
        return new_key.key


async def is_key_valid(key: str) -> bool:
    async with AsyncSessionLocal() as session:
        stmt = select(AccessKey).where(AccessKey.key == key)
        db_key = await session.execute(stmt)
        return bool(db_key.one_or_none())


async def create_user(data: dict):
    """Create a new user, assign key and remove the used key from db."""
    async with AsyncSessionLocal() as session:
        stmt = select(AccessKey).where(AccessKey.key == data['key'])
        key_query = await session.execute(stmt)
        db_key = key_query.one_or_none()
        user_stmt = select(User).where(User.telegram_id == data['telegram_id'])

        if not await session.execute(user_stmt):
            new_user = User(
                telegram_id=data['telegram_id'],
                username=data.get('username'),
                access_key=data['key'],
            )
            session.add(new_user)
            await session.delete(db_key)
            await session.commit()


async def add_app() -> Application:
    async with AsyncSessionLocal() as session:
        new_app = Application()
        session.add(new_app)
        await session.commit()
        return new_app


async def remove_app(app_id: int) -> None:
    async with AsyncSessionLocal() as session:
        stmt = delete(Application).where(Application.id == app_id)
        await session.execute(stmt)
        # return smth


async def get_app(app_id: int) -> Application:
    async with AsyncSessionLocal() as session:
        stmt = select(Application).where(Application.id == app_id)
        result = await session.execute(stmt)
        return result.scalars().first()


async def get_app_list() -> Sequence[Application]:
    async with AsyncSessionLocal() as session:
        result = await session.execute(select(Application))
        return result.scalars().all()
